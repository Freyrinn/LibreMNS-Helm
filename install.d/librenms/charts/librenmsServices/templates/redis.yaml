apiVersion: v1
kind: Service
metadata:
  namespace: {{ .Release.Namespace }}
  name: redis
spec:
  type: ClusterIP
  selector:
    component: redis
  ports:
  - name: redis
    port: {{ .Values.redis.servicePort }}
    targetPort: redis
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  namespace: {{ .Release.Namespace }}
  name: redis
  labels:
    application: librenms
spec:
  serviceName: redis
  selector:
    matchLabels:
      component: redis
  replicas: 1
  template:
    metadata:
      namespace: {{ .Release.Namespace }}
      name: redis
      labels:
        application: librenms
        component: redis
    spec:
      containers:
      - name: redis
        image: {{ .Values.redis.image.repository }}:{{ .Values.redis.image.tag }}
        envFrom:
        - configMapRef:
            name: redis
        env:
        - name: REDIS_REQUIRED_PASSWORD
          valueFrom:
            secretKeyRef:
              name: application
              key: librenms_redis_password
        volumeMounts:
        - name: redis-volume
          subPath: data
          mountPath: /data
        ports:
        - name: redis
          containerPort: {{ .Values.redis.providerPort }}
          protocol: TCP
      volumes:
      - name: redis-volume
        {{- if eq .Values.redis.storage.type "temporary" }}
        emptyDir: {}
        {{- else }}
        persistentVolumeClaim:
          claimName: {{ required "the name of the pre-configured Redis persistent volume claim must be provided (librenmsServices.redis.storage.claimName)" .Values.redis.storage.claimName }}
        {{- end }}
